Working with apis!

rails new MovieLists

rails generate scaffold Profile name favorite_genre

rails generate model Movie title:string actors:text

So now we have two tables in our database, Profiles and Movies. How should we connect them??
	Profiles and movies have many and belong to each other
	
	Let's create the connection now in the models:

	So in our Profile model:
	has_and_belongs_to_many :movies
	
	Movie model:
    has_and_belongs_to_many :profiles
	
But now we need a database to connect the two. It'll need to be named movies_profiles. Convention dictates
it must be alphabetical. And we need two columns to reference our other tables, movie_id and profile_id:

	rails generate migration CreateMoviesAndProfiles :profile_id:integer movie_id:integer

Make sure in the migration it reads:
 create_table :movies_profiles do |t|
      t.integer :profile_id
      t.integer :movie_id

	  
Now let's migrate the database.
	rake db:migrate

Let's make sure these connections work. Open up rails console
	Profile.create(name: "Dom", favorite_genre: "Horror")
	x = Profile.first
	x.movies.create(title: "Fargo", actors: "William H Macy")
	
Success!













Now that we've got the database working, we're going to set up a wrapper to work with the movie database api.

Create a new file the_movie_db.rb in the lib/assets folder.

In order to access the files, Ruby needs to be told to look there. Add the following line to config/application.rb
	config.autoload_paths += Dir["#{config.root}/lib/**/"]
	
And add the following line to application_controller.rb
	require 'the_movie_db'
	
We'll be using Faraday, an http client library. We need to add it to the gemfile.
	gem 'faraday'


POST CONTENTS OF THE_MOVIE_DB	
	
	
	
	
	
	
	
	
	
	
	
	
	
Let's setup the views
	Ignoring the profile for a bit, let's get the application to retrieve results
	We need a main index with a search bar
	We need to parse the results
	Then we need to show the individual results, whether it's a movie or a person
	rails generate controller home index
	rails generate controller person show 
	rails generate controller movie show
	rails generate controller search index

Adjust routes a bit:
		get '/person/:id', to: 'person#show', as: 'person'
		get '/movie/:id', to: 'movie#show', as: 'movie'
	    get 'search', to: "search#index"
	    root 'home#index'

Now let's add a search bar with two radio buttons (person and movie) to the index page.
		<%= form_tag("/search", method: "get") do %>
	    <%= text_field_tag(:query) %>
	    <%= radio_button_tag(:type, "person") %>
	    <%= label_tag(:type_person, "Person") %>
	    <%= radio_button_tag(:type, "movie") %>
	    <%= label_tag(:type_movie, "Movie") %>
		<% end %>

	When we click submit, it'll create a request going to /search with a querystring for the movie or person and type.
	
	So we need to add some code to the search view. We'll create partials to keep things organized
	
	_person.html.erb
	<% x = list_people(@querystring) %>
	Number of results: <%= x['total_results'] %>
	
	_movie.html.erb
		<% x = list_movies(@querystring) %>
	Number of results: <%= x['total_results'] %>
	
	search.html.erb
	
	<h1>Search Results</h1>
		<%= render 'person' if @type == 'person' %>
		<%= render 'movie' if @type == 'movie' %>
	
	
	
Now that we have all the logic setup to interact with the api, let's add some authentication so we can start working with our database:

	


